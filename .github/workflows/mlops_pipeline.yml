name: MLOps Pipeline

on:
  push:
    branches:
      - main

jobs:
  train-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Vérifier le code source
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurer Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    # 3. Installer les dépendances
    - name: Install dependencies
      run: |
        pip install --no-cache-dir -r api/requirements.txt

    # 4. Entraîner et logger le modèle
    - name: Train and log model
      run: |
        python MLflow/pipeline.py

    # 5. Construire l'image Docker
    - name: Build Docker image
      run: |
        docker build -t ml-api .

    # 6. Pousser l'image Docker sur DockerHub
    - name: Push Docker image to DockerHub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker tag ml-api:latest ${{ secrets.DOCKER_USERNAME }}/ml-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/ml-api:latest

    # 7. Déployer l'image sur l'instance GCP
    - name: Deploy Docker image to GCP instance
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
        chmod 600 ssh_key
        ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@34.170.123.233 << 'EOF'
        docker pull ${{ secrets.DOCKER_USERNAME }}/ml-api:latest
        docker stop ml-api-container || true
        docker rm ml-api-container || true
        docker run -d --name ml-api-container -p 5001:5000 ${{ secrets.DOCKER_USERNAME }}/ml-api:latest
        EOF
        rm ssh_key
